class Node:
    def __init__(self, pos, parent=None, action=None, cost=0):
        self.pos = tuple(pos)    # the state; positions are (row,col)
        self.parent = parent     # reference to parent node. None means root node.
        self.action = action     # action used in the transition function (root node has None)
        self.cost = cost         # for uniform cost this is the depth. It is also g(n) for A* search

    def __str__(self):
        return f"Node - pos = {self.pos}; action = {self.action}; cost = {self.cost}"

    def get_path_from_root(self):
        """returns nodes on the path from the root to the current node."""
        node = self
        path = [node]

        while not node.parent is None:
            node = node.parent
            path.append(node)
            

        path.reverse()

        return(path)
ACTIONS = [(-1, 0, 'North'), (1, 0, 'South'), (0, -1, 'West'), (0, 1, 'East')]    
def mark_maze(maze, pos, symbol):
    """Marks the maze at a given position with a symbol."""
    maze[pos[0]][pos[1]] = symbol
    
def DFS(maze, start, goal):
    #  Initialize the initial node and check if it's the goal
    initial_node = Node(pos=start)
    if start == goal:  # Check if the initial state is the goal
        return initial_node.get_path_from_root(), 0, 0, 0, 0
    #  Initialize the frontier (FIFO queue) and reached set
    frontier = [initial_node]  # Frontier initialized with the initial node
    
    reached = set()  # reached set to track visited nodes
    
    # Loop until we either find the goal or exhaust the frontier
    visited=[]
    branch=[]
    nodes_expanded = 0
    max_tree_depth = 0
    max_frontier_size = 1
    while frontier:
        
        node = frontier.pop(-1)
        nodes_expanded += 1
#         print('node',node)
        node1=[(node.pos[0]-1,node.pos[1]),(node.pos[0]+1,node.pos[1]),(node.pos[0],node.pos[1]-1),(node.pos[0],node.pos[1]+1)]
#         print(node1)
        if mh.find_pos(maze, what = "S") in node1:
            node1.pop(node1.index(mh.find_pos(maze, what = "S")))
        if mh.find_pos(maze, what = "G") in node1:
            node1.pop(node1.index(mh.find_pos(maze, what = "G")))
#         print('node1',node1)
#         print(visited)
#         print(branch)
        while len(visited)>2 and (visited[-1] not in node1):
#             print('branch1',branch)
            branch.pop(-1)
            
            last_branch_item = branch[-1]

            # Find the index of the last branch item in the visited list
            if last_branch_item in visited:
                index = visited.index(last_branch_item)
                # Slice the visited list to keep everything up to and including the last_branch_item
                visited1 = visited[:index+1]

#             print("Updated visited list:", visited1)
            for v in visited:
                if v not in visited1:
                    if mh.look(maze, v) != 'G' and mh.look(maze, v) != 'S':
                        mark_maze(maze, v, ' ') 
            
            visited = visited1
#             print('branch2',branch)
#             print('visited',visited)
        visited.append(node.pos)
      
        
        if mh.look(maze, node.pos)!='G' and mh.look(maze, node.pos)!='S':
            mark_maze(maze, node.pos, '.')
            
        reached.add(node.pos)
        
        br=0
        if mh.look(maze, node.pos)=='G' and len(visited)<=20:
                    solution_path = child.get_path_from_root()
                    
                        
                    for path_node in solution_path:
                        if mh.look(maze, path_node.pos)!='G' and mh.look(maze, path_node.pos)!='S':
                            mark_maze(maze, path_node.pos, 'P')
                            clear_output(wait=True)
                            mh.show_maze(maze)
                            #print('len',len(solution_path))
                    return solution_path, node.cost, nodes_expanded, max_tree_depth, max_frontier_size

        for dx, dy, action in ACTIONS:
            next_pos = (node.pos[0] + dx, node.pos[1] + dy) #next position 
            
            if mh.look(maze, next_pos)!='X' and next_pos not in visited:
                
                br+=1
                # Create child nodes
                child = Node(next_pos, node, action, node.cost+1) #child branch
                
#                 print('child',child)
                frontier.append(child)
                max_tree_depth = max(max_tree_depth, child.cost)
                max_frontier_size = max(max_frontier_size, len(frontier))
#                 print(f"Frontier after append: {[str(n.pos) for n in frontier]}")
                if br>=2:
                    branch.append(node.pos)
                
                if mh.look(maze, node.pos)=='G' and len(reached)>=20:
                    
#                     print('visited',visited)
#                     print('branch',branch)
                    
                    last_branch_item = branch[-1]

                    # Find the index of the last branch item in the visited list
                    if last_branch_item in visited:
                        index = visited.index(last_branch_item)
                        # Slice the visited list to keep everything up to and including the last_branch_item
                        visited1 = visited[:index+1]

#                     print("Updated visited list:", visited1)
                    for v in visited:
                        if v not in visited1:
                            if mh.look(maze, v) != 'G' and mh.look(maze, v) != 'S':
                                mark_maze(maze, v, ' ') 
                    
                    visited=visited1
#                     print('visited',visited)
                    continue            
            
        if (br==0 and node.pos in visited):
#             print('Wall')
#             print('visited',visited)
#             print('branch',branch)
            last_branch_item = branch[-1]

            # Find the index of the last branch item in the visited list
            if last_branch_item in visited:
                index = visited.index(last_branch_item)
                # Slice the visited list to keep everything up to and including the last_branch_item
                visited1 = visited[:index+1]

#             print("Updated visited list:", visited1)
            for v in visited:
                if v not in visited1:
                    if mh.look(maze, v) != 'G' and mh.look(maze, v) != 'S':
                        mark_maze(maze, v, ' ')
            visited=visited1
#             print('visited',visited)
            continue
        

        clear_output(wait=True)
        mh.show_maze(maze)     
        
with open("small_maze.txt", "r") as f:
    maze_str = f.read()
maze = mh.parse_maze(maze_str)
start= mh.find_pos(maze, what = "S")
goal= mh.find_pos(maze, what = "G")
print('start point is',start,'goal point is',goal)
[solution_path,path_cost,nodes_expanded,max_tree_depth, max_frontier_size] = DFS(maze, start, goal)
data = {
    'Algorithm': ['DFS'],
    'Path Cost': [path_cost],
    'Nodes Expanded': [nodes_expanded],
    'Max Tree Depth': [max_tree_depth],
    'Max Frontier Size': [max_frontier_size]
}

# Create a DataFrame
df = pd.DataFrame(data)
df
